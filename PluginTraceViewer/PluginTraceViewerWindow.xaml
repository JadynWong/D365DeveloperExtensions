<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:connection="clr-namespace:CrmDeveloperExtensions2.Core.Connection;assembly=CrmDeveloperExtensions2.Core"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"  
             xmlns:theming="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"  
             xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:platformUi="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities"
             xmlns:vsp="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:pluginTraceViewer="clr-namespace:PluginTraceViewer"
             x:Class="PluginTraceViewer.PluginTraceViewerWindow"
             mc:Ignorable="d"
             d:DesignHeight="350" d:DesignWidth="1100" SnapsToDevicePixels="True">
    <UserControl.Resources>
        <SolidColorBrush x:Key="OverlayColor" Color="DarkGray" Opacity="0.5" />
        <Style TargetType="{x:Type UserControl}">
            <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowBackgroundKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}"/>
        </Style>
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsp:EnvironmentColors.TitleBarActiveGradientBrushKey}}"/>
        </Style>
        <Style TargetType="{x:Type DataGridColumnHeader}" x:Key="DataGridColumnHeaderStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextActiveKey}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowBorderKey}}"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Margin" Value="-1,-1,0,0" />
            <Setter Property="Padding" Value="5"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsp:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type DataGridRow}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextActiveKey}}"/>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="GridHeaderButtonStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="ToolBarButtonStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextInactiveKey}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowBorderKey}}"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" Padding="10 0 10 1" Height="20" MinWidth="30" Margin="1 0 1 0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsp:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextActiveKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type StackPanel}" x:Key="StacKPanelToolbar">
            <Setter Property="Background" Value="{DynamicResource VsBrush.CommandBarGradientBegin}"/>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <connection:XrmToolingConnection Grid.Column="0" x:Name="ConnPane" Connected="ConnPane_OnConnected" SolutionBeforeClosing="ConnPane_OnSolutionBeforeClosing"/>
        <Grid Grid.Column="1" HorizontalAlignment="Stretch">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Height="31" VerticalAlignment="Top" Style="{StaticResource StacKPanelToolbar}">
                <Button x:Name="Customizations" Click="Customizations_OnClick" IsEnabled="False" Style="{DynamicResource ToolBarButtonStyle}" Content="Customizations"/>
                <Button x:Name="Solutions" Click="Solutions_OnClick" IsEnabled="False" Style="{DynamicResource ToolBarButtonStyle}" Content="Solutions"/>
                <Button x:Name="Poll" Click="Poll_OnClick" IsEnabled="False" Style="{DynamicResource ToolBarButtonStyle}" Content="Start Polling"/>
                <Button x:Name="PollOff" Click="Poll_OnClick" IsEnabled="False" Style="{DynamicResource ToolBarButtonStyle}" Content="Stop Polling" Visibility="Collapsed"/>
            </StackPanel>
            <DataGrid x:Name="CrmPluginTraces" AutoGenerateColumns="False" IsReadOnly="True" HeadersVisibility="Column" Margin="5,31,0,0" BorderThickness="0"
                      Background="Transparent" ColumnHeaderStyle="{DynamicResource DataGridColumnHeaderStyle}"
                      CanUserResizeColumns="False" CanUserResizeRows="False" RowDetailsVisibilityMode="Collapsed" ItemsSource="{Binding Traces, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                <DataGrid.Columns>
                    <DataGridTemplateColumn CanUserSort="False">
                        <DataGridTemplateColumn.Header>
                            <StackPanel Background="Transparent">
                                <Button x:Name="Refresh" Click="Refresh_OnClick" Style="{DynamicResource GridHeaderButtonStyle}">
                                    <imaging:CrispImage x:Name="RefreshImage" Moniker="{x:Static catalog:KnownMonikers.Refresh}" ToolTip="Refresh" />
                                </Button>
                            </StackPanel>
                        </DataGridTemplateColumn.Header>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button x:Name="ViewDetails" Click="ViewDetails_OnClick" Style="{DynamicResource GridHeaderButtonStyle}">
                                    <imaging:CrispImage x:Name="ViewDetailsImage" Moniker="{x:Static catalog:KnownMonikers.ShowDetailsPane}" ToolTip="View Details" />
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn CanUserSort="False" Width="16">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button x:Name="OpenInCrm" Click="OpenInCrm_OnClick" Style="{DynamicResource GridHeaderButtonStyle}">
                                    <imaging:CrispImage x:Name="OpenInCrmImage" Moniker="{x:Static catalog:KnownMonikers.OpenWebSite}" ToolTip="Open In Crm" />
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn CanUserSort="False">
                        <DataGridTemplateColumn.Header>
                            <StackPanel>
                                <Button x:Name="Delete" Click="Delete_OnClick" Style="{DynamicResource GridHeaderButtonStyle}">
                                    <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.DeleteGroup}" ToolTip="Delete Log(s)" />
                                </Button>
                            </StackPanel>
                        </DataGridTemplateColumn.Header>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding PendingDelete, UpdateSourceTrigger=PropertyChanged}" 
                                          HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Created On" Binding="{Binding CreatedOn}"/>
                    <DataGridTextColumn Header="Entity" Binding="{Binding Entity}"/>
                    <DataGridTextColumn Header="Message" Binding="{Binding MessageName}"/>
                    <DataGridTextColumn Header="Correlation Id" Binding="{Binding CorrelationId}"/>
                    <DataGridTextColumn Header="Depth" Binding="{Binding Depth}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="HorizontalAlignment" Value="Center" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Mode" Binding="{Binding Mode}"/>
                    <DataGridTextColumn Header="Type Name" Binding="{Binding TypeName}"/>
                    <DataGridTextColumn Header="Execution Duration" Binding="{Binding ExecutionDuration}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="HorizontalAlignment" Value="Right" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                </DataGrid.Columns>
                <DataGrid.RowDetailsTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Details}" Margin="10" />
                    </DataTemplate>
                </DataGrid.RowDetailsTemplate>
            </DataGrid>
            <Grid x:Name="LockOverlay" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch" Panel.ZIndex="10" Background="{DynamicResource OverlayColor}" Visibility="Hidden">
                <Label x:Name="LockMessage" Content="Working..." VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="36"/>
            </Grid>
        </Grid>
    </Grid>
</UserControl>